<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Quantization on Practical ML</title>
    <link>https://arikpoz.github.io/tags/quantization/</link>
    <description>Recent content in Quantization on Practical ML</description>
    <image>
      <title>Practical ML</title>
      <url>https://arikpoz.github.io/images/papermod-cover.png</url>
      <link>https://arikpoz.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://arikpoz.github.io/tags/quantization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neural Network Quantization in PyTorch</title>
      <link>https://arikpoz.github.io/posts/2025-04-16-neural-network-quantization-in-pytorch/</link>
      <pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://arikpoz.github.io/posts/2025-04-16-neural-network-quantization-in-pytorch/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;image here&amp;quot;&#34; loading=&#34;lazy&#34; src=&#34;https://arikpoz.github.io/posts/2025-04-16-neural-network-quantization-in-pytorch/lead-image.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This tutorial provides an introduction to quantization in PyTorch, covering both theory and practice. Weâ€™ll explore the different types of quantization, and apply both post training quantization (PTQ) and quantization aware training (QAT) on a simple example using CIFAR-10 and ResNet18. In the presented example we achieve a &lt;strong&gt;75% reduction in space&lt;/strong&gt; and &lt;strong&gt;16% reduction in GPU latency&lt;/strong&gt; with only 1% drop in accuracy.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-quantization&#34;&gt;What is Quantization?&lt;/h2&gt;
&lt;p&gt;Quantization is a model optimization technique that reduces the numerical precision used to represent weights and activations in deep learning models. Its primary benefits include:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
